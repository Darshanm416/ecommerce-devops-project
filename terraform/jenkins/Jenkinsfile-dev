// Jenkinsfile

pipeline {
    agent any

    environment {
        // These lines were the source of the previous error.
        // Groovy declarative pipelines can be strict about comments in certain blocks.
        ECR_REPO_ACCOUNT_ID = "160885263644" // Your AWS Account ID
        AWS_REGION = "us-east-1" // Your AWS Region
    }

    parameters {
        string(name: 'ENV_DIR', defaultValue: 'environments/dev', description: 'Terraform environment folder path')
        string(name: 'BRANCH_TO_BUILD', defaultValue: 'main', description: 'Git branch to build and apply Terraform changes from')
        // APP_IMAGE_TAG is still useful as Terraform will pass it to Helm charts (e.g., your_app:BUILD_NUMBER)
        string(name: 'APP_IMAGE_TAG', defaultValue: "${env.BUILD_NUMBER}", description: 'Docker image tag for applications')
    }

    stages {
        stage('Checkout Code') {
            steps {
                // REPLACE 'your-actual-github-pat-jenkins-id' with the ID of your Jenkins credential for GitHub
                git credentialsId: 'your-actual-github-pat-jenkins-id', url: 'https://github.com/Darshanm416/ecommerce-devops-project.git', branch: "${params.BRANCH_TO_BUILD}"
            }
        }

        stage('Debug Branch Name') {
            steps {
                script {
                    echo "DEBUG: Current branch name (from env.BRANCH_NAME): ${env.BRANCH_NAME}"
                    echo "DEBUG: Parameter BRANCH_TO_BUILD (selected by user): ${params.BRANCH_TO_BUILD}"
                }
            }
        }

        # --- Terraform Stages (Provision Infrastructure & Deploy Apps) ---
        stage('Initialize Terraform') {
            steps {
                dir("${params.ENV_DIR}") {
                    sh 'terraform init -upgrade' // Use -upgrade to ensure module versions are refreshed
                }
            }
        }

        stage('Validate Terraform') {
            steps {
                dir("${params.ENV_DIR}") {
                    sh 'terraform validate'
                }
            }
        }

        stage('Format Check') {
            steps {
                dir("${params.ENV_DIR}") {
                    sh 'terraform fmt -check'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir("${params.ENV_DIR}") {
                    # Plan to a file for review/apply consistency
                    sh 'terraform plan -out=tfplan.out -var-file="terraform.tfvars"'
                }
            }
        }

        stage('Terraform Apply') {
            when {
                # This ensures apply only runs if 'main' branch is selected (or whatever is in BRANCH_TO_BUILD)
                expression { params.BRANCH_TO_BUILD.equals('main') }
            }
            steps {
                dir("${params.ENV_DIR}") {
                    # Apply the saved plan
                    sh 'terraform apply -auto-approve tfplan.out'
                }
            }
        }
        // --- END OF TERRAFORM STAGES ---

        // Docker Image Build & Push Stages (REMOVED as they are handled by a separate CI pipeline)
    }

    post {
        success {
            echo '✅ Pipeline finished successfully! Infrastructure provisioned and applications deployed.'
        }
        failure {
            echo '❌ Pipeline failed. Check logs for details.'
            // Add email/Slack notification logic here
        }
    }
}
